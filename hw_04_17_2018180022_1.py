edges = [ 
  (0, 4, 463), (0, 11, 347), (0, 12, 410), (0, 20, 294), (0, 21, 360), 
  (1, 5, 61), (1, 10, 343), (1, 17, 395), (2, 6, 162), (2, 10, 431), 
  (2, 16, 135), (2, 17, 415), (2, 18, 281), (2, 23, 435), (3, 4, 59), 
  (3, 15, 230), (3, 21, 118), (4, 11, 393), (4, 15, 273), (5, 9, 341), 
  (5, 10, 333), (5, 23, 427), (6, 10, 268), (6, 12, 432), (6, 14, 465), 
  (6, 16, 298), (6, 18, 278), (6, 19, 199), (7, 9, 120), (7, 13, 257), 
  (7, 24, 410), (8, 11, 275), (8, 12, 111), (8, 15, 407), (8, 19, 420), 
  (8, 20, 481), (9, 10, 341), (9, 23, 253), (9, 24, 357), (11, 15, 141), 
  (12, 16, 194), (12, 19, 410), (12, 20, 370), (12, 22, 324), (13, 14, 375), 
  (13, 17, 323), (13, 22, 318), (13, 23, 83), (14, 19, 350), (14, 24, 211), 
  (15, 21, 177), (16, 18, 348), (16, 20, 421), (18, 24, 377), (19, 22, 211), 
  (19, 23, 376), (22, 23, 400), (23, 24, 335), 
]
num_vertex = 25

print('Using Set Cover')

# Make U, F from Data
U = { ??? } # 엣지 총집합
F = [ set() for ... ]
for i in 엣지갯수:
  ??? # fill F: n 번째 정점을 선택하면 i 번째 간선이 커버된다

# 구하려는 Set Cover 해 정점들
vc = set()

# Main Loop: Select C
while U:
  max_i = ??? # U 에 살아있는 것과 가장 교집합이 많은 정점
  ??? # U 에서 max_i 번째 정점 선택했을 때 커버되는 간선들을 삭제한다
  ??? # remove max_i from F
  vc.add(max_i)

print(len(vc), vc)
